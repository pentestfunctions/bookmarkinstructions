javascript:(function(){    var css = `        .node circle {fill: #fff; stroke: steelblue; stroke-width: 3px;}        .node text {font: 12px sans-serif; fill: black;}        .link {fill: none; stroke: #ccc; stroke-width: 2px;}        .tree-container {position: fixed; top: 10px; left: 10px; z-index: 9999; background: rgba(255, 255, 255, 0.8); border: 1px solid #ccc; border-radius: 5px; padding: 10px;}        .close-btn {position: absolute; top: 0; right: 0; padding: 5px; cursor: pointer; font-size: 16px; font-weight: bold;}%60;        var style = document.createElement('style');    style.type = 'text/css';    style.appendChild(document.createTextNode(css));    document.head.appendChild(style);    var script = document.createElement('script');    script.src = 'https://d3js.org/d3.v5.min.js';    document.head.appendChild(script);    script.onload = function () {        var container = document.createElement('div');        container.className = 'tree-container';        document.body.appendChild(container);        var closeButton = document.createElement('span');        closeButton.className = 'close-btn';        closeButton.innerText = 'X';        closeButton.onclick = function() {            container.remove();        };        container.appendChild(closeButton);        var div = document.createElement('div');        container.appendChild(div);        var svg = d3.select(div).append('svg')            .attr('width', 960)            .attr('height', 500)            .append('g')            .attr('transform', 'translate(90,20)');        var treeData = {            name: "Penetration Testing Tools",            url: "http://example.com/root",            children: [                {                    name: "OSINT",                    url: "http://example.com/node1",                    children: [                        { name: "Node 1.1", url: "http://example.com/node1.1" },                        {                             name: "Database lookups",                            children: [                                { name: "0t Rocks", url: "https://search.0t.rocks/" },                                { name: "Leak-Lookup", url: "https://leak-lookup.com/search" },                                { name: "Snusbase", url: "https://snusbase.com/search" }                            ]                        }                    ]                },                { name: "Node 2" },                {                    name: "Node 3",                    children: [                        { name: "Node 3.1" }                    ]                }            ]        };        var margin = { top: 20, right: 90, bottom: 30, left: 90 },            width = 960 - margin.left - margin.right,            height = 500 - margin.top - margin.bottom;        var i = 0, duration = 750, root;        var treemap = d3.tree().size([height, width]);        root = d3.hierarchy(treeData, function (d) { return d.children; });        root.x0 = height / 2;        root.y0 = 0;        function collapse(d) {            if(d.children) {                d._children = d.children;                d._children.forEach(collapse);                d.children = null;            }        }        collapse(root);        update(root);        function update(source) {            var treeData = treemap(root);            var nodes = treeData.descendants(),                links = treeData.descendants().slice(1);            nodes.forEach(function (d) { d.y = d.depth * 180 });            var node = svg.selectAll('g.node')                .data(nodes, function (d) { return d.id || (d.id = ++i); });            var nodeEnter = node.enter().append('g')                .attr('class', 'node')                .attr("transform", function (d) {                    return "translate(" + source.y0 + "," + source.x0 + ")";                })                .on('click', click);            nodeEnter.append('circle')                .attr('class', 'node')                .attr('r', 1e-6)                .style("fill", function (d) {                    return d._children ? "lightsteelblue" : "#fff";                });            nodeEnter.append('text')                .attr("dy", ".35em")                .attr("x", function (d) {                    return d.children || d._children ? 13 : -13;                })                .attr("text-anchor", function (d) {                    return d.children || d._children ? "start" : "end";                })                .text(function (d) { return d.data.name; });            var nodeUpdate = nodeEnter.merge(node);            nodeUpdate.transition()                .duration(duration)                .attr("transform", function (d) {                    return "translate(" + d.y + "," + d.x + ")";                });            nodeUpdate.select('circle.node')                .attr('r', 10)                .style("fill", function (d) {                    return d._children ? "lightsteelblue" : "#fff";                })                .attr('cursor', 'pointer');            var nodeExit = node.exit().transition()                .duration(duration)                .attr("transform", function (d) {                    return "translate(" + source.y + "," + source.x + ")";                })                .remove();            nodeExit.select('circle')                .attr('r', 1e-6);            nodeExit.select('text')                .style('fill-opacity', 1e-6);            var link = svg.selectAll('path.link')                .data(links, function (d) { return d.id; });            var linkEnter = link.enter().insert('path', "g")                .attr("class", "link")                .attr('d', function (d) {                    var o = { x: source.x0, y: source.y0 };                    return diagonal(o, o);                });            var linkUpdate = linkEnter.merge(link);            linkUpdate.transition()                .duration(duration)                .attr('d', function (d) { return diagonal(d, d.parent) });            var linkExit = link.exit().transition()                .duration(duration)                .attr('d', function (d) {                    var o = { x: source.x, y: source.y };                    return diagonal(o, o);                })                .remove();            nodes.forEach(function (d) {                d.x0 = d.x;                d.y0 = d.y;            });        }        function diagonal(s, d) {            var path = %60M ${s.y} ${s.x}                C ${(s.y + d.y) / 2} ${s.x},                  ${(s.y + d.y) / 2} ${d.x},                  ${d.y} ${d.x}%60;            return path;        }        function click(d) {            if (d.children) {                d._children = d.children;                d.children = null;            } else if (d._children) {                d.children = d._children;                d._children = null;            } else if (d.data.url) {                window.open(d.data.url, '_blank').focus();            }            update(d);        }    };})();
